/*=========================================================================

   Program: ParaView
   Module:    pqLiveSourcePanel.cxx

   Copyright (c) 2005-2008 Sandia Corporation, Kitware Inc.
   All rights reserved.

   ParaView is a free software; you can redistribute it and/or modify it
   under the terms of the ParaView license version 1.2. 

   See License_v1.2.txt for the full ParaView license.
   A copy of this license can be obtained by contacting
   Kitware Inc.
   28 Corporate Drive
   Clifton Park, NY 12065
   USA

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=========================================================================*/
#include "pqLiveSourcePanel.h"


#include "vtkSMProxyManager.h"
#include "vtkSMSourceProxy.h"
#include "vtkSmartPointer.h"
#include "vtkSMCPStateLoader.h"
#include "vtkSMPropertyHelper.h"
#include "vtkSMStringVectorProperty.h"
#include "vtkSMDoubleVectorProperty.h"
#include "vtkProcessModule.h"
#include "vtkClientServerStream.h"
#include "vtkClientServerID.h"
#include "vtkWeakPointer.h"
#include "vtkPVXMLElement.h"
#include "vtkSMIntVectorProperty.h"
#include "vtkSMPropertyIterator.h"
#include "vtkSMProxyProperty.h"

// ParaView Includes.
#include "pqActiveObjects.h"
#include "pqServer.h"
#include "pqActiveObjects.h"
#include "pqPipelineSource.h"
#include "pqLoadDataReaction.h"
#include "pqSourcesMenuReaction.h"
#include "pqPVApplicationCore.h"
#include "pqAnimationManager.h"
#include "pqAnimationScene.h"
#include "pqAutoGeneratedObjectPanel.h"
#include "pqObjectPanelInterface.h"
#include "pqObjectInspectorWidget.h"
#include "pqCollapsedGroup.h"
#include "pqProxy.h"
#include "pqTreeWidget.h"
#include "pqPVApplicationCore.h"
#include "pqPythonManager.h"
#include "pqPythonDialog.h"



#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QPushButton>
#include <QCheckBox>
#include <QLabel>
#include <QTreeWidget>
#include <QTreeWidgetItem>
#include <QHeaderView>
#include <QDebug>
#include <vtksys/ios/sstream>
#include <QTcpServer>
#include <QTcpSocket>



//-----------------------------------------------------------------------------
class pqLiveSourcePanel::pqInternal
{
public:
  pqInternal()
  {
  this->LastTime = 0;
  this->ProxyPanel = 0;
  this->PropertyPanel = 0;
  this->ProxyPanelAcceptButton = 0;
  this->ProxyPanelResetButton = 0;
  this->TcpServer = 0;
  this->TcpSocket = 0;
  }

  vtkSMSourceProxy* LiveSourceProxy;

  QWidget* ProxyPanel;
  QPushButton*  StartButton;
  QPushButton*  StopButton;
  QPushButton*  PollButton;
  QPushButton*  ListenButton;
  QLabel*       LastTimeLabel;
  QCheckBox*    SnapToLatestCheckBox;
  QTreeWidget*  TreeWidget;

  QTcpServer* TcpServer;
  QTcpSocket* TcpSocket;

  pqObjectPanel* PropertyPanel;
  QPushButton*   ProxyPanelAcceptButton;
  QPushButton*   ProxyPanelResetButton;

  vtkSMSourceProxy* LiveSource;
  vtkSmartPointer<vtkSMCPStateLoader> Loader;
  QTimer* Timer;
  double LastTime;

};

//-----------------------------------------------------------------------------
pqLiveSourcePanel::pqLiveSourcePanel(pqProxy* object_proxy, QWidget* p) :
  Superclass(object_proxy, p),
  Internal(new pqInternal())
{
  //pqCollapsedGroup* const group = new pqCollapsedGroup(this);
  //group->setTitle("group widget");
  //QVBoxLayout* layout = new QVBoxLayout(group);

  delete this->findChild<QWidget*>("_labelForSinkStatus");

  QGridLayout* const gridLayout = this->PanelLayout;
  //panel_layout->addWidget(group);

  // from row, from col, row span, col span
  //panel_layout->addWidget(group, panel_layout->rowCount(), 0, 1, panel_layout->columnCount());

  this->Internal->LiveSource = vtkSMSourceProxy::SafeDownCast(this->proxy());

  this->Internal->TreeWidget = new pqTreeWidget();
  this->Internal->TreeWidget->headerItem()->setData(0, Qt::DisplayRole, "Extracts");


  this->Internal->SnapToLatestCheckBox = new QCheckBox("Snap to last timestep");
  this->Internal->SnapToLatestCheckBox->setCheckState(Qt::Unchecked);

  QHBoxLayout* buttonLayout = new QHBoxLayout;
  this->Internal->PollButton = new QPushButton("Poll");
  this->Internal->StartButton = new QPushButton("Start");
  this->Internal->StopButton = new QPushButton("Stop");
  buttonLayout->addWidget(this->Internal->PollButton);
  buttonLayout->addWidget(this->Internal->StartButton);
  buttonLayout->addWidget(this->Internal->StopButton);

  //this->Internal->ListenButton = new QPushButton("Listen");
  //this->Internal->ListenButton->setCheckable(true);

  this->Internal->LastTimeLabel = new QLabel();

  //gridLayout->addWidget(this->Internal->ListenButton, gridLayout->rowCount(), 0, 1, gridLayout->columnCount());

  gridLayout->addWidget(this->Internal->TreeWidget, gridLayout->rowCount(), 0, 1, gridLayout->columnCount());
  gridLayout->addWidget(this->Internal->LastTimeLabel,
                        gridLayout->rowCount(), 0, 1, gridLayout->columnCount());
  gridLayout->addWidget(this->Internal->SnapToLatestCheckBox,
                        gridLayout->rowCount(), 0, 1, gridLayout->columnCount());
  gridLayout->addLayout(buttonLayout, gridLayout->rowCount(), 0, 1, gridLayout->columnCount());





  this->connect(this->Internal->PollButton, SIGNAL(clicked()),
                SLOT(onPollServer()));
  this->connect(this->Internal->StartButton, SIGNAL(clicked()),
                SLOT(onStartClicked()));
  this->connect(this->Internal->StopButton, SIGNAL(clicked()),
                SLOT(onStopClicked()));
  //this->connect(this->Internal->ListenButton, SIGNAL(clicked()),
  //              SLOT(onListenModeChanged()));


  this->connect(this->Internal->TreeWidget, SIGNAL(itemActivated(QTreeWidgetItem*, int)),
                SLOT(onItemActivated(QTreeWidgetItem*)));
  
  this->Internal->Timer = new QTimer(this);
  this->Internal->Timer->setSingleShot(true);
  this->Internal->Timer->setInterval(1000);
  this->connect(this->Internal->Timer, SIGNAL(timeout()), SLOT(onTimeOut()));

  this->updateLastTimeLabel();

  // Create a tcp server socket
  this->Internal->TcpServer = new QTcpServer(this);
  this->connect(this->Internal->TcpServer, SIGNAL(newConnection()),
                    SLOT(onNewConnection()));
  this->Internal->TcpServer->listen(QHostAddress::Any, 12345);
}

//-----------------------------------------------------------------------------
pqLiveSourcePanel::~pqLiveSourcePanel()
{
  delete this->Internal;
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::updateLastTimeLabel()
{
  QString lastTime = QString("<b>Last timestep:<b> %1").arg(this->Internal->LastTime, 0, 'f', 3);
  this->Internal->LastTimeLabel->setText(lastTime);
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::accept()
{
  this->setSinkStatusFromWidget();
  this->Superclass::accept();

  // Disable the edit widget for the ListenPort property so that it cannot
  // be changed after the first accept.
  QWidget* editBox = this->findChild<QWidget*>("ListenPort");
  if (editBox)
    {
    editBox->setEnabled(false);
    }
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::reset()
{
  this->setWidgetFromSinkStatus();
  this->Superclass::reset();
}


//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onNewConnection()
{
  this->Internal->TcpSocket = this->Internal->TcpServer->nextPendingConnection();
  if (this->Internal->TcpSocket)
    {
    this->connect(this->Internal->TcpSocket, SIGNAL(readyRead()), SLOT(onSocketNotify()));
    this->Internal->TcpServer->close();
    }
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onSocketNotify()
{
  this->Internal->TcpSocket->readAll();
  this->onPollServer();
}

//-----------------------------------------------------------------------------
bool pqLiveSourcePanel::snapToLatestTimeStep()
{
  return this->Internal->SnapToLatestCheckBox->isChecked();
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onListenModeChanged()
{
  if (this->Internal->ListenButton->isChecked())
    {
    this->Internal->LiveSource->InvokeCommand("Listen");
    }
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onItemActivated(QTreeWidgetItem* item)
{
  if (this->Internal->ProxyPanel)
    {
    delete this->Internal->ProxyPanel;
    this->Internal->ProxyPanel = 0;
    this->Internal->PropertyPanel = 0;
    }

  int row = item->data(0, Qt::UserRole).toInt();
/*
  vtkSMSourceProxy* source = this->Internal->Loader->GetSource(row);
  if (source)
    {
    pqProxy* pqproxy = new pqProxy("sources", item->text(0), source, NULL);

    pqObjectPanelInterface* panelFactory = pqObjectInspectorWidget::newStandardPanelsFactory();

    QWidget* proxyPanel = new QWidget();
    QVBoxLayout* layout = new QVBoxLayout(proxyPanel);

    pqObjectPanel* panel = 0;
    if (panelFactory->canCreatePanel(pqproxy))
      {
      panel = panelFactory->createPanel(pqproxy, proxyPanel);
      }
    else
      {
      panel = new pqAutoGeneratedObjectPanel(pqproxy, proxyPanel);
      }


    QPushButton* acceptButton = new QPushButton("Accept");
    QPushButton* resetButton = new QPushButton("Reset");
    QHBoxLayout* hboxLayout = new QHBoxLayout();
    hboxLayout->addWidget(acceptButton);
    hboxLayout->addWidget(resetButton);
    acceptButton->setEnabled(false);
    resetButton->setEnabled(false);

    layout->addLayout(hboxLayout);
    layout->addWidget(panel);

    this->Internal->ProxyPanel = proxyPanel;
    this->Internal->ProxyPanelAcceptButton = acceptButton;
    this->Internal->ProxyPanelResetButton = resetButton;
    this->Internal->PropertyPanel = panel;
    proxyPanel->show();

    this->connect(panel, SIGNAL(modified()), SLOT(onStateChanges()));
    this->connect(acceptButton, SIGNAL(clicked()), SLOT(onAcceptStateChanges()));
    this->connect(resetButton, SIGNAL(clicked()), SLOT(onResetStateChanges()));
    }
*/
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::setSinkStatusFromWidget()
{
  unsigned int idx = 0;
  vtkSMProxy* self = this->proxy();

  for (int i = 0; i < this->Internal->TreeWidget->topLevelItemCount(); ++i)
    {
    QTreeWidgetItem* item = this->Internal->TreeWidget->topLevelItem(i);
    int sourceIndex = item->data(0, Qt::UserRole).toInt();
    vtkSMProxy* proxy = this->Internal->Loader->GetSource(sourceIndex);
    int sinkTag = this->Internal->Loader->GetSinkTag(proxy);
    if (sinkTag < 0)
      {
      continue;
      }

    int status = item->checkState(0) == Qt::Checked;
    vtkSMPropertyHelper(self, "SinkStatus").Set(idx++, sinkTag);
    vtkSMPropertyHelper(self, "SinkStatus").Set(idx++, status);
    }

  vtkSMPropertyHelper(self, "SinkStatus").SetNumberOfElements(idx);
  self->UpdateProperty("SinkStatus");
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::setWidgetFromSinkStatus()
{
/*
  vtkSMProxy* self = this->proxy();
  unsigned int numberOfElements = vtkSMPropertyHelper(self, "SinkStatus").GetNumberOfElements();

  if (numberOfElements % 2 != 0)
    {
    qWarning() << "Expected number of elements to be multiple of 2.";
    return;
    }

  QMap<int, int> status;
  for (unsigned int i = 0; i < numberOfElements; i += 2)
    {
    int sinkTag = vtkSMPropertyHelper(self, "SinkStatus").GetAsInt(i);
    status[sinkTag] = vtkSMPropertyHelper(self, "SinkStatus").GetAsInt(i+1);
    }

  for (int i = 0; i < this->Internal->TreeWidget->topLevelItemCount(); ++i)
    {
    QTreeWidgetItem* item = this->Internal->TreeWidget->topLevelItem(i);
    int sourceIndex = item->data(0, Qt::UserRole).toInt();
    vtkSMProxy* proxy = this->Internal->Loader->GetSource(sourceIndex);
    int sinkTag = this->Internal->Loader->GetSinkTag(proxy);
    if (sinkTag < 0)
      {
      continue;
      }

    if (status.value(sinkTag, 1))
      {
      item->setCheckState(0, Qt::Checked);
      }
    else
      {
      item->setCheckState(0, Qt::Unchecked);
      }
    }
*/
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onItemChanged(QTreeWidgetItem* item)
{
  this->setModified();
}

#include <vtkstd/set>

namespace {
class pqProxySet : public vtkstd::set<vtkSMProxy*> {};

//---------------------------------------------------------------------------
void collectReferredProxies(pqProxySet& setOfProxies, vtkSMProxy* proxy)
{
  vtkSmartPointer<vtkSMPropertyIterator> iter;
  iter.TakeReference(proxy->NewPropertyIterator());
  for (iter->Begin(); !iter->IsAtEnd(); iter->Next())
    {
    vtkSMProxyProperty* pp = vtkSMProxyProperty::SafeDownCast(
      iter->GetProperty());
    for (unsigned int cc=0; pp && (pp->GetNumberOfProxies() > cc); cc++)
      {
      vtkSMProxy* referredProxy = pp->GetProxy(cc);
      if (referredProxy)
        {
        setOfProxies.insert(referredProxy);
        collectReferredProxies(setOfProxies, referredProxy);
        }
      }
    }
}
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onStateChanges()
{
  this->Internal->ProxyPanelAcceptButton->setEnabled(true);
  this->Internal->ProxyPanelResetButton->setEnabled(true);
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onResetStateChanges()
{
  if (!this->Internal->PropertyPanel)
    {
    return;
    }

  this->Internal->PropertyPanel->reset();
  this->Internal->ProxyPanelAcceptButton->setEnabled(false);
  this->Internal->ProxyPanelResetButton->setEnabled(false);

}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onAcceptStateChanges()
{
  if (!this->Internal->PropertyPanel)
    {
    return;
    }


  this->Internal->PropertyPanel->accept();
  this->Internal->ProxyPanelAcceptButton->setEnabled(false);
  this->Internal->ProxyPanelResetButton->setEnabled(false);

/*
  vtkPVXMLElement* elem = vtkPVXMLElement::New();
  elem->SetName("states");

  vtkSMProxy* proxy = this->Internal->PropertyPanel->proxy();
  proxy->SaveState(elem);

  pqProxySet referredProxies;
  collectReferredProxies(referredProxies, proxy);

  for (pqProxySet::iterator itr = referredProxies.begin(); itr != referredProxies.end(); ++itr)
    {
    (*itr)->SaveState(elem);
    }

  vtksys_ios::ostringstream ostr;
  elem->PrintXML(ostr, vtkIndent());
  //elem->PrintXML();
  elem->Delete();


  vtkSMPropertyHelper(this->proxy(), "CPStateSend").Set(0, ostr.str().c_str());
  this->Internal->LiveSource->UpdateProperty("CPStateSend");
*/
}


//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onStartClicked()
{
  this->Internal->StartButton->setEnabled(false);
  this->Internal->StopButton->setEnabled(true);

  this->Internal->Timer->start();
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onStopClicked()
{
  this->Internal->Timer->stop();

  this->Internal->StartButton->setEnabled(true);
  this->Internal->StopButton->setEnabled(false);
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onTimeOut()
{
  if (!this->Internal->StopButton->isEnabled())
    {
    return;
    }

  this->onPollServer();
  this->Internal->Timer->start();
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onNewTimeStep()
{
  QString script = "try: onLiveDataTimeStep()\n"
                   "except NameError: pass\n";
  pqPVApplicationCore::instance()->pythonManager()->pythonShellDialog()->runString(script);
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::onPollServer()
{
  printf("Invoking poll...\n");
  vtkSMSourceProxy* self = this->Internal->LiveSource;
  self->InvokeCommand("Poll");

  //QTimer::singleShot(0, this, SLOT(onNewTimeStep()));

  printf("Calling UpdatePipelineInformation\n");
  //this->Internal->LiveSource->UpdatePipelineInformation();
/*
  double lastTime = 0;
  int nElements = vtkSMPropertyHelper(self, "TimestepValues").GetNumberOfElements();
  if (nElements)
    {
    lastTime = vtkSMPropertyHelper(self, "TimestepValues").GetAsDouble(nElements-1);
    }

  bool latestTimestepChanged = (lastTime != this->Internal->LastTime);
  this->Internal->LastTime = lastTime;
  this->updateLastTimeLabel();


  if (latestTimestepChanged && this->snapToLatestTimeStep())
    {
    pqPVApplicationCore::instance()->animationManager()->
      getActiveScene()->getProxy()->InvokeCommand("GoToLast");
    }


  this->populateProxyTree();
*/
}

//-----------------------------------------------------------------------------
void pqLiveSourcePanel::populateProxyTree()
{

  if (this->Internal->TreeWidget->topLevelItemCount())
    {
    return;
    }

  vtkSMStringVectorProperty* stateProp = vtkSMStringVectorProperty::SafeDownCast(
    this->Internal->LiveSource->GetProperty("CPState"));

  printf("Number of elements: %d\n", stateProp->GetNumberOfElements());

  if (!stateProp || !stateProp->GetNumberOfElements())
    {
    return;
    }

  std::cout << stateProp->GetElement(0) << std::endl;

  return;

  this->Internal->Loader = vtkSmartPointer<vtkSMCPStateLoader>::New();
  this->Internal->Loader->SetSession(this->Internal->LiveSource->GetSession());
  this->Internal->Loader->Go(stateProp->GetElement(0));

  this->Internal->TreeWidget->clear();

  for (int i = 0; i < this->Internal->Loader->GetNumberOfSources(); ++i)
    {
    vtkSMSourceProxy* proxy = this->Internal->Loader->GetSource(i);
    int sinkTag = this->Internal->Loader->GetSinkTag(proxy);
    if (sinkTag < 0)
      {
      continue;
      }

    QTreeWidgetItem *item = new QTreeWidgetItem(this->Internal->TreeWidget);

    QString proxyName = this->Internal->Loader->GetSourceName(i);
    QString proxyLabel = proxy->GetXMLLabel();
    //item->setText(0, QString("%1 - %2").arg(proxyLabel).arg(proxyName));
    item->setText(0, proxyLabel);
    item->setData(0, Qt::UserRole, i);
    item->setFlags(item->flags() | Qt::ItemIsUserCheckable);
    item->setCheckState(0, Qt::Checked);
    this->Internal->TreeWidget->addTopLevelItem(item);

    // Get this proxy's referred proxies
    pqProxySet referredProxies;
    collectReferredProxies(referredProxies, proxy);

    // for each source proxy, add it as a child to the above item if it is referred
    // count in reverse so that referred proxies appear in the tree in the correct order
    for (int j = this->Internal->Loader->GetNumberOfSources() - 1; j >= 0; --j)
      {
      vtkSMSourceProxy* referredProxy = this->Internal->Loader->GetSource(j);
      pqProxySet::iterator itr = referredProxies.find(referredProxy);
      if (itr != referredProxies.end())
        {
        QString referredProxyName = this->Internal->Loader->GetSourceName(j);
        QString referredProxyLabel = referredProxy->GetXMLLabel();
        if (referredProxyLabel == "TrivialProducer")
          {
          continue;
          }

        QTreeWidgetItem *referredItem = new QTreeWidgetItem(item);
        //referredItem->setText(0, QString("%1 - %2").arg(referredProxyLabel).arg(referredProxyName));
        referredItem->setText(0, referredProxyLabel);
        referredItem->setData(0, Qt::UserRole, j);
        item->addChild(referredItem);
        }
      }

    }

  this->connect(this->Internal->TreeWidget, SIGNAL(itemChanged(QTreeWidgetItem*, int)),
            SLOT(onItemChanged(QTreeWidgetItem*)));
}
